# src/train_model.py
import pandas as pd
import joblib
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import matplotlib.pyplot as plt

def train_model():
    # Load processed data
    X_train = pd.read_csv('../data/processed/X_train.csv')
    y_train = pd.read_csv('../data/processed/y_train.csv').squeeze()
    X_test = pd.read_csv('../data/processed/X_test.csv')
    y_test = pd.read_csv('../data/processed/y_test.csv').squeeze()
    
    # Load preprocessor
    preprocessor = joblib.load('../models/preprocessor.pkl')
    
    # Transform data
    X_train_transformed = preprocessor.transform(X_train)
    X_test_transformed = preprocessor.transform(X_test)
    
    # Initialize and train model
    model = RandomForestRegressor(
        n_estimators=200,
        max_depth=10,
        min_samples_split=5,
        random_state=42
    )
    model.fit(X_train_transformed, y_train)
    
    # Save model
    joblib.dump(model, '../models/job_satisfaction_model.pkl')
    
    # Evaluate model
    evaluate_model(model, X_train_transformed, y_train, X_test_transformed, y_test)
    
    # Plot feature importance
    plot_feature_importance(model, preprocessor)

def evaluate_model(model, X_train, y_train, X_test, y_test):
    for name, X, y in [("Training", X_train, y_train), ("Testing", X_test, y_test)]:
        preds = model.predict(X)
        print(f"\n{name} Set Performance:")
        print(f"RÂ² Score: {r2_score(y, preds):.4f}")
        print(f"RMSE: {mean_squared_error(y, preds, squared=False):.4f}")
        print(f"MAE: {mean_absolute_error(y, preds):.4f}")
        print(f"Max Error: {max(abs(y - preds)):.4f}")

def plot_feature_importance(model, preprocessor):
    # Get feature names
    num_features = preprocessor.transformers_[0][2]
    cat_features = preprocessor.transformers_[1][1]['encoder'].get_feature_names_out(
        preprocessor.transformers_[1][2]
    )
    feature_names = list(num_features) + list(cat_features)
    
    # Get importances
    importances = model.feature_importances_
    indices = np.argsort(importances)[::-1]
    
    # Plot
    plt.figure(figsize=(12, 8))
    plt.title("Feature Importances")
    plt.bar(range(len(indices)), importances[indices], align='center')
    plt.xticks(range(len(indices)), [feature_names[i] for i in indices], rotation=90)
    plt.tight_layout()
    plt.savefig('../models/feature_importances.png')
    plt.close()

if __name__ == "__main__":
    train_model()
